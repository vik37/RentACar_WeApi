// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RentACar_DataAccess_Layer;

namespace RentACar_DataAccess_Layer.Migrations
{
    [DbContext(typeof(RentaCarDbContext))]
    partial class RentaCarDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "338bc9d9-4f55-4578-9bf7-66c6d29684df", ConcurrencyStamp = "ac306897-85b3-46c1-8f27-2955eea491f2", Name = "admin", NormalizedName = "ADMIN" },
                        new { Id = "47060357-ce90-4933-bf04-589b9d5cb909", ConcurrencyStamp = "47e20d85-5813-417f-bbdb-7e78f85ef904", Name = "user", NormalizedName = "USER" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = "3a00c366-9a04-4256-9cfb-bb70a6a609ad", RoleId = "338bc9d9-4f55-4578-9bf7-66c6d29684df" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RentACar_Domain_Layer.Models.AdditionalEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<double>("Price");

                    b.Property<string>("Type")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("AddEquipment");

                    b.HasData(
                        new { Id = 1, Description = "KINGWO NB-IOT GPS Tracker Mini GPS Tracking Device For Vehicle/Car/Motorcycle", Name = "GPS-Wi Fi", Price = 2.64, Type = "KINGWO NB-IOT" },
                        new { Id = 2, Description = "Universal Style Cross Bars: Aluminum Bar Construction&Mounting Brackets Cargo Box: Heavy Duty ABS Plastic Construction Capacity: 12 cu.ft. / Dimensions: 68 L x 31 W x 16 H Opens to 14.75 Wide to Store Bulky Items Opens from the Side and Stays Open Til you Close It", Name = "Roof for Cars", Price = 3.09, Type = "Pair 120cm Adjustable Roof Rail Aluminum Cross Bar+Cargo Box Carrier w/Lock+Keys (Black)" },
                        new { Id = 3, Description = "The Nolan N53 MX is an off-road full-face helmet by. Extremely aggressive design and ostentatious personality for a product in line with the latest trends in its class. Available in two different outer shell sizes, the N53 MX features an extra-wide window to accommodate different types of goggles. The rear of the shell itself has been designed to house the strap. ", Name = "Motorcycle Helmet", Price = 1.94, Type = "Nolan N53 MX Smart - Flat Black" },
                        new { Id = 4, Description = "Color - Gloss Black, Item Weight - 1.4 kg, Dimensions - 27 * 12 * 8 inches,  Lezyne Pressure Overdrive Floor Pump: Black ", Name = "Bicycle Floor Pump", Price = 1.18, Type = "LEZYNE" },
                        new { Id = 5, Description = "Installation Type	Seat Belt, LATCH, Color	Binx, Dimensions - LxWxH 30.67 x 18.66 x 15.59 inches, Weight - 17.5 Pounds", Name = "Baby Car Seat", Price = 2.45, Type = "Graco" }
                    );
                });

            modelBuilder.Entity("RentACar_Domain_Layer.Models.AirportService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Airport");

                    b.Property<string>("City")
                        .HasMaxLength(200);

                    b.Property<double>("Price");

                    b.Property<bool>("isClientWant");

                    b.HasKey("Id");

                    b.ToTable("AirportService");
                });

            modelBuilder.Entity("RentACar_Domain_Layer.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("DownPayment");

                    b.Property<string>("IdBankCard")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("IdCardNum");

                    b.Property<int>("OrderId");

                    b.Property<int>("PaymentType");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("RentACar_Domain_Layer.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfOrder");

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("StatusType");

                    b.Property<string>("UserId");

                    b.Property<bool>("isDownPaid");

                    b.Property<bool>("isPayed");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("RentACar_Domain_Layer.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<int>("Age");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<int>("Gender");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "3a00c366-9a04-4256-9cfb-bb70a6a609ad", AccessFailedCount = 0, Age = 38, ConcurrencyStamp = "cc077af7-ab3c-4491-b4ad-c02b4ba6a112", Email = "rentacar@rentamkdrive.com", EmailConfirmed = true, Gender = 0, LockoutEnabled = false, NormalizedEmail = "rentacar@rentamkdrive.com", NormalizedUserName = "ADMIN", PasswordHash = "AQAAAAEAACcQAAAAEO1v/iDRdn5GKIgL+LlT4oFuqYxCV9WTCiMFggkZftYhnS6mTcxKIKxO9N2P/GclcA==", PhoneNumber = "+389/77-102-223", PhoneNumberConfirmed = true, SecurityStamp = "", TwoFactorEnabled = true, UserName = "admin" }
                    );
                });

            modelBuilder.Entity("RentACar_Domain_Layer.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("Doors");

                    b.Property<string>("Model")
                        .HasMaxLength(50);

                    b.Property<double>("Price");

                    b.Property<int>("VehicleType");

                    b.HasKey("Id");

                    b.ToTable("Vehicle");

                    b.HasData(
                        new { Id = 1, Brand = "Mercedes-Benz", Color = "Black", Description = "produced by the German automobile manufacturer Mercedes-Benz in 2010, 5-speed Automatic,Fuel-Diesel, Top Speed 158 km/h (98 mph)", Doors = 4, Model = "A-Class", Price = 24.62, VehicleType = 1 },
                        new { Id = 2, Brand = "Skoda", Color = "Metallic-Grey", Description = "produced by the Czech car manufacturer Škoda Auto in 2008, 6-speed automatic and 5/6-speed Manual, Fuel-Petrol, Top Speed 210 km/h (130 mph)", Doors = 4, Model = "Octavia", Price = 20.38, VehicleType = 1 },
                        new { Id = 3, Brand = "Toyota", Color = "White", Description = "produced by the Japan car manufacturer in Toyota in 2012, 4-speed automatic, Fuel-Petrol, Top Speed 180 km/h (111 mph)", Doors = 4, Model = "Premio", Price = 26.97, VehicleType = 1 },
                        new { Id = 4, Brand = "Ford", Color = "Red", Description = "produced by the American car manufacturer in Ford Motor Company in 2009, 5-speed manual and 4-speed automatic, Top Speed 230 km/h (143 mph)", Doors = 4, Model = "Explorer", Price = 22.56, VehicleType = 2 },
                        new { Id = 5, Brand = "Yamaha", Color = "Yellow-Black", Description = "produced by the Japanese manufacturer in Yamaha Company in 2003, Top Speed 217 km/h (135 mph), Power 95 hp (70.8 kW), Torque 45 lb⋅ft (61 N⋅m) (claimed)", Doors = 0, Model = "FZS600 Fazer", Price = 16.89, VehicleType = 3 },
                        new { Id = 6, Brand = "Scooter", Color = "Orange-Black", Description = "The Super 9 is a lightweight scooter made by Kymco in Taiwan, Top Speed 56 km/h (35 mph), Power 3.5 hp (2.6 kW) at 5,500 rpm, Transmission Automatic CVT", Doors = 0, Model = "Kymco Super-9", Price = 12.19, VehicleType = 3 },
                        new { Id = 7, Brand = "Mercedes-Benz", Color = "White", Description = "produced by the German automobile manufacturer Mercedes-Benz in 2009, 6-speed Manual and 7-speed Automatic,Fuel-TurboDiesel, Top Speed 155 km/h (96 mph)", Doors = 2, Model = "Sprinter", Price = 24.62, VehicleType = 4 },
                        new { Id = 8, Brand = "Larson-Senza", Color = "White-Red", Description = "Larson is a 2008 craft and 6.2 metres length. The boat is capable of transferring with comfort and safety up to 8 persons. The engine is a four stroke Mercuiser 225hp and is supported with a backup engine of 5hp Yamaha for extra safety.", Doors = 0, Model = "186", Price = 37.19, VehicleType = 5 },
                        new { Id = 9, Brand = "Mountain bicycle", Color = "Blue", Description = "29 wheels and hydraulic disc brakes.Hardtail, 100mm shock, 2x9 gears,  Shimano Deore derailleur.", Doors = 0, Model = "Bianchi", Price = 7.83, VehicleType = 6 }
                    );
                });

            modelBuilder.Entity("RentACar_Domain_Layer.Models.VehicleOrder", b =>
                {
                    b.Property<int>("VehicleId");

                    b.Property<int>("OrderId");

                    b.Property<int>("AirportServiceId");

                    b.Property<int>("AddEquipmenrId");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("VehicleId", "OrderId", "AirportServiceId", "AddEquipmenrId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("AddEquipmenrId");

                    b.HasIndex("AirportServiceId");

                    b.HasIndex("OrderId");

                    b.ToTable("VehicleOrders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RentACar_Domain_Layer.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RentACar_Domain_Layer.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RentACar_Domain_Layer.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RentACar_Domain_Layer.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RentACar_Domain_Layer.Models.Invoice", b =>
                {
                    b.HasOne("RentACar_Domain_Layer.Models.Order", "Order")
                        .WithOne("Invoice")
                        .HasForeignKey("RentACar_Domain_Layer.Models.Invoice", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RentACar_Domain_Layer.Models.Order", b =>
                {
                    b.HasOne("RentACar_Domain_Layer.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("RentACar_Domain_Layer.Models.VehicleOrder", b =>
                {
                    b.HasOne("RentACar_Domain_Layer.Models.AdditionalEquipment", "AddEquipment")
                        .WithMany("VehicleOrders")
                        .HasForeignKey("AddEquipmenrId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RentACar_Domain_Layer.Models.AirportService", "AirportService")
                        .WithMany("VehicleOrders")
                        .HasForeignKey("AirportServiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RentACar_Domain_Layer.Models.Order", "Order")
                        .WithMany("VehicleOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RentACar_Domain_Layer.Models.Vehicle", "Vehicle")
                        .WithMany("VehicleOrders")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
